--- css ---
/**
 * This is an example of live coding a terminal window.
 * I got the inspiration from Ubuntu terminal :-P
 * First of all, let's add some base styles to the body
 */

html, body { height: 100%; }
body {
	margin: 0;
	padding: 0;
	background: transparent url('static/bg-8-full.jpg');
}
--- apply ---

--- css:apply ---
/**
 * Now we're ready to style the terminal.
 * Let's begin with the display, which by default
 * has the class "live-coder__display", but this
 * can be configure
 */

.live-coder__display {

	/**
	 * I'm gonna make it dark so the code won't be
	 * much visible, but don't worry, it'll come back
	 */

	background-color: rgba(8, 0, 39, 0.8);
	color: white; /* See?, I'm back :-) */

	margin: 0;
	padding: 4px;
	overflow: auto;
	width: 600px;
	max-height: 400px;
}

--- js ---
/**
 * Let's build the markup for the window, which will
 * contain the display also... but first we speed up
 * a bit the coding ;-)
 */

liveCoder.setTypingSpeed(10);
--- apply ---

--- html:div.display-container ---
<div class="display-header">

	<div class="display-header__actions">
		<div class="close"></div>
		<div class="minimize"></div>
		<div class="maximize"></div>
	</div>

	<div class="display-header__title"></div>

</div>
<div class="display-body"></div>
--- apply ---

--- js ---
liveCoder.setTypingSpeed(50);
--- apply ---

/**
 * We're done with the markup. We need to now move the
 * display element into the body of the window
 */

var lcDisplay = document.querySelector('.live-coder__display');
var displayBody = document.querySelector('.display-body');

displayBody.appendChild(lcDisplay);
--- apply ---

--- css:apply ---
/**
 * Time to make it look more like Ubuntu terminal
 */

.display-container {
	position: absolute;
	top: 20px;
	left: 20px;
	border-top-left-radius: 6px;
	border-top-right-radius: 6px;
	box-shadow: 0px 0px 15px 1px rgba(0,0,0,0.75);
}

.display-header {
	height: 30px;
	background: linear-gradient(180deg, #666464 0%, #3D3B3B 100%);
	border-top-left-radius: 6px;
	border-top-right-radius: 6px;
	display: flex;
	align-items: center;
}

.display-header.dragging {
	/* for later adding dragging functionality */
	cursor: move;
}

--- html:div.display-header__title:apply ---
<!-- Title of the terminal -->
live-coder@jscriptcoder

--- css:apply ---
.display-header__title {
	color: white;
	font-family: monospace;
	font-size: 14px;
	font-weight: bold;
}

/**
 * We proceed styling the action buttons
 */
.display-header__actions {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin: 0 8px;
}

.display-header__actions > div {
	width: 16px;
	height: 16px;
	background: linear-gradient(180deg, #9E9E9E 0%, #5a5a5a 100%);
	border-radius: 8px;
	margin: 0 2px;
}

.display-header__actions .close {
	background: linear-gradient(180deg, #f78867 0%, #b72b00 100%);
}

--- js ---
/**
 * Now, let's imagine there is an async operation.
 * It'll take sometime and we want to continue
 * once it's done... We fake it with setTimeout
 */

var wait5sec = new Promise(function (resolve) {
	setTimeout(function () { resolve() }, 5000) // 5 seconds
});
--- apply ---

--- promise:wait5sec ---

--- js ---
/**
 * We can also pause liveCoder for an amount of time.
 * For this we need to have access to the instance
 */
liveCoder.pause(5000);
--- apply ---

--- js ---
/**
 * Or we pause indefinitely.
 * IMPORTANT: in order to continue, click anywhere
 * on the document
 */
liveCoder.pause();
--- apply ---

--- css:apply ---
/**
 * A little bit of messing around with the window :-P
 */
.display-container { transition: all 0.3s ; }
.display-container { left: 250px; }
.display-container { top: 250px; }
.display-container { left: 20px; }
.display-container { top: 20px; }
.display-container { transition: none; }

--- js ---
// Let's actually make the window draggable
liveCoder.setTypingSpeed(10);
--- apply ---

(function () {
	// Private scope so as not to leak variables outside

	var dContainer = document.querySelector('.display-container');
	var dHeader = document.querySelector('.display-header');
	var diffX, diffY;

	var mousemoveHandler = function (event) {
		event.preventDefault(); // prevents user selection

		dContainer.style.left = (event.clientX - diffX) + 'px';
		dContainer.style.top = (event.clientY - diffY) + 'px';
	};

	dHeader.addEventListener('mousedown', function (event) {
		event.stopPropagation(); // stops click on document

		diffX = event.clientX - dContainer.offsetLeft;
		diffY = event.clientY - dContainer.offsetTop;

		dHeader.classList.add('dragging');

		document.addEventListener('mousemove', mousemoveHandler);
	});

	dHeader.addEventListener('mouseup', function (event) {
		diffX = diffY = void 0;
		dHeader.classList.remove('dragging');
		document.removeEventListener('mousemove', mousemoveHandler);
	});

})();

liveCoder.setTypingSpeed(50);
--- apply ---

// Try now dragging the window grabbing title bar
liveCoder.pause(5000);
--- apply ---

/**
 * Ooops!, we forgot something. We forgot the icons
 * for the actions buttons. Let's use FontAwesome
 * to add nice ones
 */
var head = document.getElementsByTagName('head')[0];
var scriptFontAwesome = document.createElement('script');
var scriptLoaded = new Promise(function (resolve) {
	scriptFontAwesome.onload = resolve;
})

scriptFontAwesome.src = 'https://use.fontawesome.com/0add3451c0.js';
head.appendChild(scriptFontAwesome);
--- apply ---

--- await:scriptLoaded ---

var closeButton = document.querySelector('.display-header .close');
var minButton = document.querySelector('.display-header .minimize');
var maxButton = document.querySelector('.display-header .maximize');

closeButton.className += ' fa fa-times';
--- apply ---

minButton.className += ' fa fa-minus';
--- apply ---

maxButton.className += ' fa fa-square-o';
--- apply ---

--- css:apply ---
.display-header__actions > div {
	font-size: 10px;
	text-align: center;
    line-height: 16px;
    color: #382b2b;
}